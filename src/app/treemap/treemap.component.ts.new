import { Component, ElementRef, OnInit, OnDestroy, ViewChild } from '@angular/core';
import * as d3 from 'd3';
import { Subscription } from 'rxjs';
import { YamlDataService } from '../services/yaml-data.service';
import { FootballPlay } from '../models/football-play.model';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { PlayModalService } from '../services/play-modal.service';

interface TreemapData {
  name: string;
  children: TreemapItem[];
}

interface TreemapItem {
  name: string;
  value: number;
  avgYards: number;
  playType: string;
}

// Extended hierarchy node type for D3 treemap
interface TreemapNode extends d3.HierarchyNode<any> {
  x0?: number;
  x1?: number;
  y0?: number;
  y1?: number;
  data: {
    name: string;
    value?: number;
    avgYards?: number;
    playType?: string;
  };
}

@Component({
  selector: 'app-treemap',
  standalone: true,
  imports: [CommonModule, FormsModule],
  template: `
    <div class="treemap-container">
      <h1>Play Concept Treemap</h1>
      <p class="description">
        This treemap visualizes play concepts by frequency and effectiveness. 
        The size of each box represents how often a concept was called, 
        while the color indicates the average yards gained (green for more yards, red for fewer yards).
      </p>
      
      <div class="filter-container">
        <span class="filter-label">Filter by Play Type:</span>
        <button class="filter-button" [class.active]="selectedFilter === 'all'" (click)="filterData('all')">All Plays</button>
        <button class="filter-button" [class.active]="selectedFilter === 'run'" (click)="filterData('run')">Run Plays</button>
        <button class="filter-button" [class.active]="selectedFilter === 'pass'" (click)="filterData('pass')">Pass Plays</button>
      </div>
      
      <div class="loading-message" *ngIf="loading">
        Loading data...
      </div>
      
      <div class="error-message" *ngIf="error">
        {{ error }}
      </div>
      
      <div class="data-source" *ngIf="dataSource">
        <span>Data Source: <code>{{ dataSource }}</code></span>
      </div>
      
      <div class="treemap-wrapper" *ngIf="!loading && !error">
        <div #treemap class="treemap"></div>
      </div>
      
      <div class="concept-details" *ngIf="selectedConcept">
        <div class="concept-header">
          <h2>{{ selectedConcept }} Plays</h2>
          <button class="close-button" (click)="clearSelectedConcept()">Ã—</button>
        </div>
        
        <div class="concept-stats">
          <div class="stat-item">
            <span class="stat-label">Total Plays:</span>
            <span class="stat-value">{{ selectedConceptPlays.length }}</span>
          </div>
          <div class="stat-item">
            <span class="stat-label">Avg. Yards:</span>
            <span class="stat-value" [ngClass]="{
              'positive-yards': selectedConceptPlays.reduce((sum, play) => sum + play.yards_gained, 0) / selectedConceptPlays.length > 0,
              'negative-yards': selectedConceptPlays.reduce((sum, play) => sum + play.yards_gained, 0) / selectedConceptPlays.length < 0
            }">
              {{ (selectedConceptPlays.reduce((sum, play) => sum + play.yards_gained, 0) / selectedConceptPlays.length).toFixed(1) }}
            </span>
          </div>
        </div>
        
        <table class="concept-plays-table">
          <thead>
            <tr>
              <th>Play Name</th>
              <th>Formation</th>
              <th>Down</th>
              <th>Distance</th>
              <th>Yards Gained</th>
              <th>Play Type</th>
              <th>Quarter</th>
              <th>Home Team</th>
            </tr>
          </thead>
          <tbody>
            <tr *ngFor="let play of selectedConceptPlays">
              <td class="play-name" (click)="openPlayModal(play)">{{ play.play_name }}</td>
              <td>{{ play.play_formation }}</td>
              <td>{{ play.down }}</td>
              <td>{{ play.distance }}</td>
              <td [ngClass]="{ 
                'positive-yards': play.yards_gained > 0,
                'negative-yards': play.yards_gained < 0,
                'neutral-yards': play.yards_gained === 0
              }">{{ play.yards_gained }}</td>
              <td>{{ play.play_type }}</td>
              <td>{{ play.qtr }}</td>
              <td>{{ play.home_team }}</td>
            </tr>
          </tbody>
        </table>
      </div>
    </div>
  `,
  styles: `
    .treemap-container {
      width: 100%;
      max-width: 1200px;
      margin: 0 auto;
      padding: 20px;
      background-color: #f8f9fa;
      border-radius: 8px;
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }
    
    h1 {
      color: #2c3e50;
      margin-bottom: 10px;
      text-align: center;
    }
    
    .description {
      color: #7f8c8d;
      text-align: center;
      margin-bottom: 20px;
      line-height: 1.5;
    }
    
    .filter-container {
      display: flex;
      align-items: center;
      justify-content: center;
      margin-bottom: 20px;
      flex-wrap: wrap;
    }
    
    .filter-label {
      margin-right: 10px;
      color: #7f8c8d;
      font-weight: 500;
    }
    
    .filter-button {
      background-color: #ecf0f1;
      border: none;
      padding: 8px 15px;
      margin: 0 5px;
      border-radius: 4px;
      cursor: pointer;
      transition: all 0.2s ease;
      color: #7f8c8d;
    }
    
    .filter-button:hover {
      background-color: #dfe6e9;
    }
    
    .filter-button.active {
      background-color: #3498db;
      color: white;
    }
    
    .loading-message, .error-message, .no-data {
      text-align: center;
      padding: 20px;
      color: #7f8c8d;
    }
    
    .error-message {
      color: #e74c3c;
    }
    
    .data-source {
      text-align: center;
      margin-bottom: 15px;
      font-size: 0.9em;
      color: #7f8c8d;
    }
    
    .data-source code {
      background-color: #f1f2f6;
      padding: 2px 5px;
      border-radius: 3px;
    }
    
    .treemap-wrapper {
      margin: 20px 0;
    }
    
    .treemap {
      width: 100%;
      height: 600px;
    }
    
    .concept-details {
      margin-top: 30px;
      border-top: 1px solid #dfe6e9;
      padding-top: 20px;
    }
    
    .concept-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 15px;
    }
    
    .concept-header h2 {
      margin: 0;
      color: #2c3e50;
    }
    
    .close-button {
      background: none;
      border: none;
      font-size: 24px;
      cursor: pointer;
      color: #7f8c8d;
    }
    
    .close-button:hover {
      color: #2c3e50;
    }
    
    .concept-stats {
      display: flex;
      gap: 20px;
      margin-bottom: 15px;
    }
    
    .stat-item {
      background-color: #f1f2f6;
      padding: 10px 15px;
      border-radius: 4px;
    }
    
    .stat-label {
      color: #7f8c8d;
      margin-right: 5px;
    }
    
    .concept-plays-table {
      width: 100%;
      border-collapse: collapse;
      margin-top: 15px;
    }
    
    .concept-plays-table th, .concept-plays-table td {
      padding: 10px;
      text-align: left;
      border-bottom: 1px solid #dfe6e9;
    }
    
    .concept-plays-table th {
      background-color: #f1f2f6;
      color: #7f8c8d;
    }
    
    .positive-yards {
      color: #27ae60;
      font-weight: bold;
    }
    
    .negative-yards {
      color: #e74c3c;
      font-weight: bold;
    }
    
    .neutral-yards {
      color: #7f8c8d;
    }
    
    .play-name {
      cursor: pointer;
      text-decoration: underline;
      color: #3498db;
    }
    
    .play-name:hover {
      color: #2980b9;
    }
    
    /* Tooltip styles */
    .treemap-tooltip {
      position: absolute;
      padding: 10px;
      background-color: rgba(44, 62, 80, 0.9);
      color: white;
      border-radius: 4px;
      pointer-events: none;
      max-width: 300px;
      z-index: 1000;
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }
    
    .tooltip-title {
      font-weight: bold;
      margin-bottom: 5px;
      font-size: 14px;
    }
    
    .tooltip-stat {
      font-size: 12px;
      margin: 3px 0;
    }
    
    /* Treemap node styles */
    .treemap-node {
      stroke: #fff;
      stroke-width: 1px;
      transition: opacity 0.2s ease;
    }
    
    .treemap-node:hover {
      opacity: 0.8;
      cursor: pointer;
    }
  `
})
export class TreemapComponent implements OnInit, OnDestroy {
  @ViewChild('treemap', { static: true }) private treemapContainer!: ElementRef;
  
  private allPlays: FootballPlay[] = [];
  private treemapData: TreemapData = { name: 'Plays', children: [] };
  private dataFilteredSubscription: Subscription | null = null;
  
  selectedFilter: string = 'all';
  loading: boolean = true;
  error: string | null = null;
  dataSource: string | null = null;
  
  // Selected concept for table display
  selectedConcept: string | null = null;
  selectedConceptPlays: FootballPlay[] = [];
  
  constructor(private yamlDataService: YamlDataService, private playModalService: PlayModalService) {}
  
  // Lifecycle hook: Initialize the component
  ngOnInit(): void {
    this.loadYamlData();
    
    // Subscribe to data filtered events
    this.dataFilteredSubscription = this.yamlDataService.dataFiltered.subscribe(event => {
      console.log('Data filtered event received in treemap:', event);
      this.processFilteredData(event.filterType, event.data);
    });
  }
  
  // Lifecycle hook: Clean up when component is destroyed
  ngOnDestroy(): void {
    // Clean up subscription when component is destroyed
    if (this.dataFilteredSubscription) {
      this.dataFilteredSubscription.unsubscribe();
    }
  } 
  
  /**
   * Load YAML data from the service
   */
  private loadYamlData() {
    this.loading = true;
    this.error = null;
    
    this.yamlDataService.loadFootballPlays()
      .subscribe({
        next: (result) => {
          if (result.data) {
            this.dataSource = result.filePath;
            this.allPlays = result.data;
            this.processData();
            this.loading = false;
          } else {
            this.error = 'Failed to parse YAML data.';
            this.loading = false;
          }
        },
        error: (err) => {
          console.error('Error loading YAML data:', err);
          this.error = 'Error loading data. Please try again.';
          this.loading = false;
        }
      });
  }
  
  /**
   * Process filtered data from the table component
   * @param filterType The type of filter applied
   * @param data The filtered data
   */
  processFilteredData(filterType: string, data: FootballPlay[]) {
    console.log(`Processing filtered data in treemap. Filter: ${filterType}, Data count: ${data.length}`);
    this.selectedFilter = filterType;
    this.allPlays = data;
    this.processData();
    
    // Clear selected concept when filter changes
    this.clearSelectedConcept();
  }
  
  /**
   * Filter the treemap data by play type
   * @param filter The filter to apply (all, run, pass)
   */
  filterData(filter: string) {
    this.selectedFilter = filter;
    
    // Apply filter
    if (filter === 'all') {
      // Reset to all data
      this.yamlDataService.filterData('all');
    } else {
      // Apply specific filter
      this.yamlDataService.filterData(filter);
    }
    
    // Clear selected concept when filter changes
    this.clearSelectedConcept();
  }
  
  /**
   * Clear the selected concept and plays
   */
  clearSelectedConcept() {
    this.selectedConcept = null;
    this.selectedConceptPlays = [];
  }
  
  /**
   * Process the data and create the treemap visualization
   */
  processData() {
    // Group plays by concept
    const conceptMap = new Map<string, { count: number, totalYards: number, playType: string }>();
    
    this.allPlays.forEach(play => {
      const concept = play.play_concept;
      
      if (!conceptMap.has(concept)) {
        conceptMap.set(concept, { 
          count: 0, 
          totalYards: 0,
          playType: play.play_type
        });
      }
      
      const conceptData = conceptMap.get(concept)!;
      conceptData.count++;
      conceptData.totalYards += play.yards_gained;
    });
    
    // Convert to treemap data format
    const children: TreemapItem[] = [];
    
    conceptMap.forEach((data, concept) => {
      children.push({
        name: concept,
        value: data.count,
        avgYards: data.totalYards / data.count,
        playType: data.playType
      });
    });
    
    // Sort by count (descending)
    children.sort((a, b) => b.value - a.value);
    
    // Update treemap data
    this.treemapData = {
      name: 'Plays',
      children: children
    };
    
    // Create treemap visualization
    this.createTreemap();
  }
  
  /**
   * Create the treemap visualization using D3.js
   */
  private createTreemap() {
    // Clear any existing chart
    d3.select(this.treemapContainer.nativeElement).selectAll('*').remove();
    
    if (this.treemapData.children.length === 0) {
      d3.select(this.treemapContainer.nativeElement)
        .append('div')
        .attr('class', 'no-data')
        .style('text-align', 'center')
        .style('padding', '40px')
        .style('color', '#7f8c8d')
        .text('No data available for the selected filter.');
      return;
    }
    
    // Set up dimensions
    const width = this.treemapContainer.nativeElement.clientWidth;
    const height = 600;
    
    // Create SVG
    const svg = d3.select(this.treemapContainer.nativeElement)
      .append('svg')
      .attr('width', width)
      .attr('height', height);
    
    // Create tooltip
    const tooltip = d3.select('body')
      .append('div')
      .attr('class', 'treemap-tooltip')
      .style('opacity', 0)
      .style('position', 'absolute')
      .style('pointer-events', 'none');
    
    // Create hierarchy
    const root = d3.hierarchy(this.treemapData)
      .sum(d => (d as any).value || 0);
    
    // Create treemap layout
    const treemapLayout = d3.treemap<any>()
      .size([width, height])
      .paddingOuter(4)
      .paddingInner(2)
      .round(true);
    
    // Apply layout
    treemapLayout(root);
    
    // Color scale for average yards
    const colorScale = d3.scaleLinear<string>()
      .domain([-5, 0, 5])
      .range(['#e74c3c', '#7f8c8d', '#27ae60']);
    
    // Create treemap cells
    const cells = svg.selectAll('g')
      .data(root.leaves())
      .enter()
      .append('g')
      .attr('transform', d => `translate(${d.x0},${d.y0})`);
    
    // Add rectangles
    cells.append('rect')
      .attr('class', 'treemap-node')
      .attr('width', d => d.x1 - d.x0)
      .attr('height', d => d.y1 - d.y0)
      .attr('fill', d => colorScale(d.data.avgYards))
      .on('mouseover', (event, d) => {
        // Show tooltip
        tooltip.transition()
          .duration(200)
          .style('opacity', 0.9);
        
        tooltip.html(`
          <div class="tooltip-title">${d.data.name}</div>
          <div class="tooltip-stat">Times Called: ${d.data.value}</div>
          <div class="tooltip-stat">Avg. Yards: ${d.data.avgYards.toFixed(1)}</div>
          <div class="tooltip-stat">Play Type: ${d.data.playType}</div>
          <div class="tooltip-stat">Click for details</div>
        `)
          .style('left', (event.pageX + 10) + 'px')
          .style('top', (event.pageY - 28) + 'px');
      })
      .on('mouseout', () => {
        // Hide tooltip
        tooltip.transition()
          .duration(500)
          .style('opacity', 0);
      })
      .on('click', (event, d) => {
        // Show concept details
        this.selectedConcept = d.data.name;
        this.selectedConceptPlays = this.getPlaysForConcept(d.data.name);
        
        // Scroll to details
        setTimeout(() => {
          const detailsElement = document.querySelector('.concept-details');
          if (detailsElement) {
            detailsElement.scrollIntoView({ behavior: 'smooth' });
          }
        }, 100);
      });
    
    // Add text labels
    cells.append('text')
      .attr('x', 5)
      .attr('y', 15)
      .text(d => d.data.name)
      .attr('font-size', '12px')
      .attr('fill', 'white')
      .style('text-shadow', '1px 1px 1px rgba(0,0,0,0.5)')
      .style('pointer-events', 'none')
      .style('overflow', 'hidden')
      .style('text-overflow', 'ellipsis');
  }
  
  // Get plays for a specific concept
  getPlaysForConcept(concept: string): FootballPlay[] {
    return this.allPlays.filter(play => play.play_concept === concept);
  }
  
  /**
   * Opens the play modal with the selected play
   * @param play The football play to display in the modal
   */
  openPlayModal(play: FootballPlay): void {
    this.playModalService.openModal(play);
  }
}
